<?php

/**
 * @file
 * Install, update and uninstall functions for the os2forms_forloeb_profile installation profile.
 */

/**
 * Implements hook_install().
 */
function os2forms_forloeb_install() {
    $theme_list = [
        'claro',
        'gin',
        'bootstrap',
        'custom_theme'
    ];

    // Install themes
    \Drupal::service('theme_installer')->install($theme_list);

    // Get theme manager
    $system_theme = \Drupal::configFactory()->getEditable('system.theme');

    // Set default and admin themes
    $system_theme
        ->set('default', 'custom_theme')
        ->set('admin', 'gin')
        ->save();
}

use Drupal\maestro\Engine\MaestroEngine;

/**
 * Implements hook_maestro_interactive_handlers() for the return of an Array
 * of function names and help text that will be displayed in the edit task
 * form under the handler field.
 */
function os2forms_forloeb_maestro_interactive_handlers() {
    return [
        'os2forms_forloeb_workflow_maestro_reassign_form' => t('TilfÃ¸j sagsbehandler'),
        'os2forms_forloeb_show_url_results' => t('Test URL fetch - requires process variables from that handler'),
    ];
}

/**
 * The Reassign for Approval form used in maestro workflows.
 *
 * @param array $form
 *   The array that contains the form.
 * @param int $queueID
 *   The queueID from Maestro.
 * @param object $obj
 *   References the calling object.
 */
function os2forms_forloeb_workflow_maestro_reassign_form(&$form, $queueID = 0, $obj) {

    $form['reviewer'] = array(
        '#id' => 'select_assigned_user',
        '#type' => 'entity_autocomplete',
        '#target_type' => 'user',
        '#default_value' => '',
        '#selection_settings' => ['include_anonymous' => FALSE],
        '#title' =>  t('Assign for Review to'),
    );

    $form['queueID'] = array(
        '#type' => 'hidden',
        '#title' => 'the queue ID in the event we need it in later processing',
        '#default_value' => $queueID,
        '#description' => ('queueID'),
    );

    //overriding the default label "complete"
    $form['actions']['submit']['#value'] = t('Assign');

    return $form;
}

/**
 * This is a simple handler to display the result
 * of calling the fetch_from_http_endpoint_batch_function handler
 * below.
 *
 * Requires two process variables, 'url_status' and 'url_body'.
 *
 * @param array $form
 *   The form you will create with this function.
 * @param int $queueID
 *   The ID of the queue task ID you are executing.
 */
function os2forms_forloeb_show_url_results(array &$form, $queueID = 0, $obj = NULL) {
  $form['queueID'] = [
    '#type' => 'hidden',
    '#title' => 'Hidden Queue ID',
    '#default_value' => $queueID,
    '#description' => ('queueID'),
  ];

  $processID = MaestroEngine::getProcessIdFromQueueId($queueID);
  $url_status = MaestroEngine::getProcessVariable('url_status', $processID);
  $url_body = MaestroEngine::getProcessVariable('url_body', $processID);
  if ($url_status === FALSE) {
    $message = 'No process variable called message defined for this workflow template';
  }

  $form['url_status'] = [
    '#plain_text' => $url_status,
    '#suffix' => '<br>',
  ];

  $form['url_body'] = [
    '#plain_text' => $url_body,
    '#suffix' => '<br>',
  ];

  return $form;
}


/**
 * This is the submit handler for the Reassign for Approval form use in maestro workflows.
 */
function os2forms_forloeb_workflow_maestro_reassign_form_submit(&$form, &$form_state) {

    $queueID = intval($form_state->getValue('queueID'));
    $processID = MaestroEngine::getProcessIdFromQueueId($queueID);

    //Who was selected? Load their username, which is the user attribute that Maestro assigns tasks by.
    $reviewer_uid = $form_state->getValue('reviewer');
    $reviewer = \Drupal\user\Entity\User::load($reviewer_uid); // pass your uid
    $reviewer_username = $reviewer->getUsername();

    //add that user to our maestro process variable.
    MaestroEngine::setProcessVariable("assigned_to", $reviewer_username, $processID);

    //Provide some feedback
    \Drupal::messenger()->addStatus("Content Reassigned");

}

/**
 *  * Implements hook_maestro_batch_handlers().
 *   *
 *    * Array of function names and help text that will be displayed
 *     * in the edit task form under the handler field.
 *      */
function os2forms_forloeb_maestro_batch_handlers() {
      return [
              'os2forms_forloeb_end_notification_batch_function' => t('Batch function to send out flow completion notification to initiator.'),
              'os2forms_forloeb_fetch_from_http_endpoint_batch_function' => t('Batch function to fetch data from an external HTTP endpoint. Returns data in two process variables, url_status and url_body.'),
              'os2forms_forloeb_create_org_unit' => t('Batch function to create a new org unit in GIR.'),
      ];
}

/**
    *  * @param int $processID
    *   *   The Maestro process ID.
    *    * @param int $queueID
    *     *   The Maestro queue ID.
    *      */
function os2forms_forloeb_end_notification_batch_function($processID, $queueID) {

   /*
    * Pseudocode for handling this:
    *
    *     * Get entity item for webform which spawned this process
    *      (ID "submission").
    *       foreach handler in webform: {
    *           if (email_handler) {
    *               email_handler.submit();
    *           }
    *       }
    */
    $sid = MaestroEngine::getEntityIdentiferByUniqueID($processID, 'submission');

    if ($sid) {
        $webform_submission = \Drupal\webform\Entity\WebformSubmission::load($sid);
        $webform =  $webform_submission->getWebform();
        $handlers = $webform->getHandlers();

        foreach ($handlers as $handler) {
            if (method_exists($handler, 'getMessage')) {
                $message = $handler->getMessage($webform_submission);
                $handler->sendMessage($webform_submission, $message);
            }
        }
    }

    return TRUE;
}

function os2forms_forloeb_fetch_from_http_endpoint_batch_function($processID, $queueID) {

    // TODO: get URL from process variable.
    $url = MaestroEngine::getProcessVariable('url', $processID);

    $response = \Drupal::httpClient()->get($url);
    $status_code = $response->getStatusCode();
    if ($status_code == 200) {
        $body = $response->getBody();
    }
    else {
        $body = '';
    }

    MaestroEngine::setProcessVariable('url_status', $status_code, $processID);
    MaestroEngine::setProcessVariable('url_body', $body, $processID);

    return TRUE;

}


function os2forms_forloeb_create_org_unit($processID, $queueID) {

    // TODO: get URL from process variable.
    $url = MaestroEngine::getProcessVariable('gir_url', $processID);

    $create_url = $url + '/service/ou/create';

    // Get ID for webform which spawned this process.
    $sid = MaestroEngine::getEntityIdentiferByUniqueID($processID, 'submission');
    if ($sid) {

        $webform_submission = \Drupal\webform\Entity\WebformSubmission::load($sid);
        // cf.
        // https://www.drupal.org/project/webform/issues/2911356#comment-12271553
        $values = $webform_submission->getData();

        // Org data
        $name = $values['name'];
        $display_in_gui = $values['display_in_gui'];
        // TODO: Extract MO UUID for parent unit.
        $parent_unit = $values['parent_unit'];
        // TODO: Extract MO UUID for location.
        $location = $values['location'];
        $start_date = $values['start_date'];
        $end_date = $values['end_date'];

        // Approval information
        $time_limit = $values['time_limit'];
        $justification = $values['justification'];
        // Extract MO UUIDs for these entities.
        $approver = $values['approver'];
        $owner = $values['owner'];

    }
    else {
        return FALSE;
    }
    $gir_json = new \stdClass();
    $gir_json->name = $name;
    $gir_json->validity = new \stdClass();
    $gir_json->validity->from = $start_date;
    $gir_json->validity->to = $end_date;

    $post_data = json_encode($gir_json);
    $response = \Drupal::httpClient()->post($create_url, $post_data);
    $status_code = $response->getStatusCode();
    if ($status_code == 200) {
        $body = $response->getBody();
    }
    else {
        $body = '';
    }

    MaestroEngine::setProcessVariable('url_status', $status_code, $processID);
    MaestroEngine::setProcessVariable('url_body', $body, $processID);

    return TRUE;

}
